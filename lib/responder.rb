module Responder

  def welcome_response
    puts "\e[H\e[2J"
    'Welcome to MASTERMIND. Would you like to (p)lay, read the (i)nstructions, or (q)uit?'
  end

  def play_response
    puts "\e[H\e[2J"
    'I have generated a beginner sequence with four elements:(r)ed, (g)reen, (b)lue, and (y)ellow.  Use (q)uit at any time to end the game. What is your guess?'
  end

  def instruction_response
    puts "\e[H\e[2J"
    """
      \nThe objective is for you to guess the code generated by the computer.
      \nStep 1: Type play or p in the terminal and your computer will generate a sequence for you to guess.
      \nStep 2: Enter your guess.  Your guess should consist of (4) letters: (r)ed, (g)reen, (b)lue, and (y)ellow, in any order.
      \nStep 3: Mastermind will provide you with feedback about your guess.
      \n\tExample Feedback: Your guess 'rrgb' has 3 of the correct elements with 2 in the correct positions.  You've taken 1 guess.
      \nStep 5: Guess again and again until you've guessed the sequence.
      \nStep 6: If you give up you can (c)heat
      \nWould you like to (p)lay or (q)uit?
    """
  end

  def quit_response
    puts "\e[H\e[2J"
    'Thank you for playing.'
    exit
  end

  def cheat_response
    puts "\e[H\e[2J"
    "The answer was #{@answer.join}. Would you like to (p)lay again or (q)uit?"
  end

  def short_response
    'Your guess is too short. Guess again...'
  end

  def long_response
    'Your guess is too long. Guess again...'
  end

  def win_response
    puts "\e[H\e[2J"
    "Congratulations! You guessed the sequence #{@answer.join} in #{@guesses.length} guesses over #{calculate_time_spent/60} minute(s), #{calculate_time_spent%60} second(s). Would you like to (p)lay again or (q)uit?"
  end

  def feedback_response(user_input)
    "Your guess #{user_input} has #{check_for_correct_letters(user_input)} of the correct elements with #{check_for_correct_position(user_input)} in the correct positions.  You've taken #{@guesses.length} guess.  Guess again..."
  end
end
